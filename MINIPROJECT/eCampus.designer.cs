#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MINIPROJECT
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="e-campus")]
	public partial class eCampusDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcourse_offered(course_offered instance);
    partial void Updatecourse_offered(course_offered instance);
    partial void Deletecourse_offered(course_offered instance);
    partial void Insertlecturer(lecturer instance);
    partial void Updatelecturer(lecturer instance);
    partial void Deletelecturer(lecturer instance);
    partial void Insertlecturer_course(lecturer_course instance);
    partial void Updatelecturer_course(lecturer_course instance);
    partial void Deletelecturer_course(lecturer_course instance);
    partial void Insertcourse(course instance);
    partial void Updatecourse(course instance);
    partial void Deletecourse(course instance);
    partial void Insertyear_semester(year_semester instance);
    partial void Updateyear_semester(year_semester instance);
    partial void Deleteyear_semester(year_semester instance);
    partial void Insertstudent_section(student_section instance);
    partial void Updatestudent_section(student_section instance);
    partial void Deletestudent_section(student_section instance);
    partial void Insertstudent(student instance);
    partial void Updatestudent(student instance);
    partial void Deletestudent(student instance);
    partial void Insertcourse_section(course_section instance);
    partial void Updatecourse_section(course_section instance);
    partial void Deletecourse_section(course_section instance);
    partial void Insertsection(section instance);
    partial void Updatesection(section instance);
    partial void Deletesection(section instance);
    partial void Insertattendance(attendance instance);
    partial void Updateattendance(attendance instance);
    partial void Deleteattendance(attendance instance);
    partial void Insertattendance_date(attendance_date instance);
    partial void Updateattendance_date(attendance_date instance);
    partial void Deleteattendance_date(attendance_date instance);
    partial void Insertattendance_status(attendance_status instance);
    partial void Updateattendance_status(attendance_status instance);
    partial void Deleteattendance_status(attendance_status instance);
    #endregion
		
		public eCampusDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public eCampusDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eCampusDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eCampusDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eCampusDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<course_offered> course_offereds
		{
			get
			{
				return this.GetTable<course_offered>();
			}
		}
		
		public System.Data.Linq.Table<lecturer> lecturers
		{
			get
			{
				return this.GetTable<lecturer>();
			}
		}
		
		public System.Data.Linq.Table<lecturer_course> lecturer_courses
		{
			get
			{
				return this.GetTable<lecturer_course>();
			}
		}
		
		public System.Data.Linq.Table<course> courses
		{
			get
			{
				return this.GetTable<course>();
			}
		}
		
		public System.Data.Linq.Table<year_semester> year_semesters
		{
			get
			{
				return this.GetTable<year_semester>();
			}
		}
		
		public System.Data.Linq.Table<student_section> student_sections
		{
			get
			{
				return this.GetTable<student_section>();
			}
		}
		
		public System.Data.Linq.Table<student> students
		{
			get
			{
				return this.GetTable<student>();
			}
		}
		
		public System.Data.Linq.Table<course_section> course_sections
		{
			get
			{
				return this.GetTable<course_section>();
			}
		}
		
		public System.Data.Linq.Table<section> sections
		{
			get
			{
				return this.GetTable<section>();
			}
		}
		
		public System.Data.Linq.Table<attendance> attendances
		{
			get
			{
				return this.GetTable<attendance>();
			}
		}
		
		public System.Data.Linq.Table<attendance_date> attendance_dates
		{
			get
			{
				return this.GetTable<attendance_date>();
			}
		}
		
		public System.Data.Linq.Table<attendance_status> attendance_status
		{
			get
			{
				return this.GetTable<attendance_status>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course_offered")]
	public partial class course_offered : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _semesterID;
		
		private string _courseCode;
		
		private int _courseID;
		
		private int _lecturer_ID;
		
		private int _course_offered_ID;
		
		private EntityRef<lecturer> _lecturer;
		
		private EntityRef<course> _course;
		
		private EntityRef<year_semester> _year_semester;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsemesterIDChanging(int value);
    partial void OnsemesterIDChanged();
    partial void OncourseCodeChanging(string value);
    partial void OncourseCodeChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void Onlecturer_IDChanging(int value);
    partial void Onlecturer_IDChanged();
    partial void Oncourse_offered_IDChanging(int value);
    partial void Oncourse_offered_IDChanged();
    #endregion
		
		public course_offered()
		{
			this._lecturer = default(EntityRef<lecturer>);
			this._course = default(EntityRef<course>);
			this._year_semester = default(EntityRef<year_semester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semesterID", DbType="Int NOT NULL")]
		public int semesterID
		{
			get
			{
				return this._semesterID;
			}
			set
			{
				if ((this._semesterID != value))
				{
					if (this._year_semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsemesterIDChanging(value);
					this.SendPropertyChanging();
					this._semesterID = value;
					this.SendPropertyChanged("semesterID");
					this.OnsemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseCode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string courseCode
		{
			get
			{
				return this._courseCode;
			}
			set
			{
				if ((this._courseCode != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseCodeChanging(value);
					this.SendPropertyChanging();
					this._courseCode = value;
					this.SendPropertyChanged("courseCode");
					this.OncourseCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lecturer_ID", DbType="Int NOT NULL")]
		public int lecturer_ID
		{
			get
			{
				return this._lecturer_ID;
			}
			set
			{
				if ((this._lecturer_ID != value))
				{
					if (this._lecturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlecturer_IDChanging(value);
					this.SendPropertyChanging();
					this._lecturer_ID = value;
					this.SendPropertyChanged("lecturer_ID");
					this.Onlecturer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course_offered_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int course_offered_ID
		{
			get
			{
				return this._course_offered_ID;
			}
			set
			{
				if ((this._course_offered_ID != value))
				{
					this.Oncourse_offered_IDChanging(value);
					this.SendPropertyChanging();
					this._course_offered_ID = value;
					this.SendPropertyChanged("course_offered_ID");
					this.Oncourse_offered_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lecturer_course_offered", Storage="_lecturer", ThisKey="lecturer_ID", OtherKey="lecturer_ID", IsForeignKey=true)]
		public lecturer lecturer
		{
			get
			{
				return this._lecturer.Entity;
			}
			set
			{
				lecturer previousValue = this._lecturer.Entity;
				if (((previousValue != value) 
							|| (this._lecturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lecturer.Entity = null;
						previousValue.course_offereds.Remove(this);
					}
					this._lecturer.Entity = value;
					if ((value != null))
					{
						value.course_offereds.Add(this);
						this._lecturer_ID = value.lecturer_ID;
					}
					else
					{
						this._lecturer_ID = default(int);
					}
					this.SendPropertyChanged("lecturer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_course_offered", Storage="_course", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.course_offereds.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.course_offereds.Add(this);
						this._courseCode = value.courseCode;
						this._courseID = value.courseID;
					}
					else
					{
						this._courseCode = default(string);
						this._courseID = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="year_semester_course_offered", Storage="_year_semester", ThisKey="semesterID", OtherKey="semesterID", IsForeignKey=true)]
		public year_semester year_semester
		{
			get
			{
				return this._year_semester.Entity;
			}
			set
			{
				year_semester previousValue = this._year_semester.Entity;
				if (((previousValue != value) 
							|| (this._year_semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._year_semester.Entity = null;
						previousValue.course_offereds.Remove(this);
					}
					this._year_semester.Entity = value;
					if ((value != null))
					{
						value.course_offereds.Add(this);
						this._semesterID = value.semesterID;
					}
					else
					{
						this._semesterID = default(int);
					}
					this.SendPropertyChanged("year_semester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lecturer")]
	public partial class lecturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _lecturer_ID;
		
		private string _lecturerName;
		
		private EntitySet<course_offered> _course_offereds;
		
		private EntitySet<lecturer_course> _lecturer_courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlecturer_IDChanging(int value);
    partial void Onlecturer_IDChanged();
    partial void OnlecturerNameChanging(string value);
    partial void OnlecturerNameChanged();
    #endregion
		
		public lecturer()
		{
			this._course_offereds = new EntitySet<course_offered>(new Action<course_offered>(this.attach_course_offereds), new Action<course_offered>(this.detach_course_offereds));
			this._lecturer_courses = new EntitySet<lecturer_course>(new Action<lecturer_course>(this.attach_lecturer_courses), new Action<lecturer_course>(this.detach_lecturer_courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lecturer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int lecturer_ID
		{
			get
			{
				return this._lecturer_ID;
			}
			set
			{
				if ((this._lecturer_ID != value))
				{
					this.Onlecturer_IDChanging(value);
					this.SendPropertyChanging();
					this._lecturer_ID = value;
					this.SendPropertyChanged("lecturer_ID");
					this.Onlecturer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lecturerName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string lecturerName
		{
			get
			{
				return this._lecturerName;
			}
			set
			{
				if ((this._lecturerName != value))
				{
					this.OnlecturerNameChanging(value);
					this.SendPropertyChanging();
					this._lecturerName = value;
					this.SendPropertyChanged("lecturerName");
					this.OnlecturerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lecturer_course_offered", Storage="_course_offereds", ThisKey="lecturer_ID", OtherKey="lecturer_ID")]
		public EntitySet<course_offered> course_offereds
		{
			get
			{
				return this._course_offereds;
			}
			set
			{
				this._course_offereds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lecturer_lecturer_course", Storage="_lecturer_courses", ThisKey="lecturer_ID", OtherKey="lecturer_ID")]
		public EntitySet<lecturer_course> lecturer_courses
		{
			get
			{
				return this._lecturer_courses;
			}
			set
			{
				this._lecturer_courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_course_offereds(course_offered entity)
		{
			this.SendPropertyChanging();
			entity.lecturer = this;
		}
		
		private void detach_course_offereds(course_offered entity)
		{
			this.SendPropertyChanging();
			entity.lecturer = null;
		}
		
		private void attach_lecturer_courses(lecturer_course entity)
		{
			this.SendPropertyChanging();
			entity.lecturer = this;
		}
		
		private void detach_lecturer_courses(lecturer_course entity)
		{
			this.SendPropertyChanging();
			entity.lecturer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lecturer_course")]
	public partial class lecturer_course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _lc_ID;
		
		private int _lecturer_ID;
		
		private int _courseID;
		
		private string _courseCode;
		
		private EntityRef<lecturer> _lecturer;
		
		private EntityRef<course> _course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlc_IDChanging(int value);
    partial void Onlc_IDChanged();
    partial void Onlecturer_IDChanging(int value);
    partial void Onlecturer_IDChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OncourseCodeChanging(string value);
    partial void OncourseCodeChanged();
    #endregion
		
		public lecturer_course()
		{
			this._lecturer = default(EntityRef<lecturer>);
			this._course = default(EntityRef<course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lc_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int lc_ID
		{
			get
			{
				return this._lc_ID;
			}
			set
			{
				if ((this._lc_ID != value))
				{
					this.Onlc_IDChanging(value);
					this.SendPropertyChanging();
					this._lc_ID = value;
					this.SendPropertyChanged("lc_ID");
					this.Onlc_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lecturer_ID", DbType="Int NOT NULL")]
		public int lecturer_ID
		{
			get
			{
				return this._lecturer_ID;
			}
			set
			{
				if ((this._lecturer_ID != value))
				{
					if (this._lecturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlecturer_IDChanging(value);
					this.SendPropertyChanging();
					this._lecturer_ID = value;
					this.SendPropertyChanged("lecturer_ID");
					this.Onlecturer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseCode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string courseCode
		{
			get
			{
				return this._courseCode;
			}
			set
			{
				if ((this._courseCode != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseCodeChanging(value);
					this.SendPropertyChanging();
					this._courseCode = value;
					this.SendPropertyChanged("courseCode");
					this.OncourseCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lecturer_lecturer_course", Storage="_lecturer", ThisKey="lecturer_ID", OtherKey="lecturer_ID", IsForeignKey=true)]
		public lecturer lecturer
		{
			get
			{
				return this._lecturer.Entity;
			}
			set
			{
				lecturer previousValue = this._lecturer.Entity;
				if (((previousValue != value) 
							|| (this._lecturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lecturer.Entity = null;
						previousValue.lecturer_courses.Remove(this);
					}
					this._lecturer.Entity = value;
					if ((value != null))
					{
						value.lecturer_courses.Add(this);
						this._lecturer_ID = value.lecturer_ID;
					}
					else
					{
						this._lecturer_ID = default(int);
					}
					this.SendPropertyChanged("lecturer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_lecturer_course", Storage="_course", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.lecturer_courses.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.lecturer_courses.Add(this);
						this._courseCode = value.courseCode;
						this._courseID = value.courseID;
					}
					else
					{
						this._courseCode = default(string);
						this._courseID = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course")]
	public partial class course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _courseCode;
		
		private int _courseID;
		
		private string _courseName;
		
		private string _shortForm;
		
		private int _creditHours;
		
		private EntitySet<course_offered> _course_offereds;
		
		private EntitySet<lecturer_course> _lecturer_courses;
		
		private EntitySet<student_section> _student_sections;
		
		private EntitySet<course_section> _course_sections;
		
		private EntitySet<section> _sections;
		
		private EntitySet<attendance> _attendances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncourseCodeChanging(string value);
    partial void OncourseCodeChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OncourseNameChanging(string value);
    partial void OncourseNameChanged();
    partial void OnshortFormChanging(string value);
    partial void OnshortFormChanged();
    partial void OncreditHoursChanging(int value);
    partial void OncreditHoursChanged();
    #endregion
		
		public course()
		{
			this._course_offereds = new EntitySet<course_offered>(new Action<course_offered>(this.attach_course_offereds), new Action<course_offered>(this.detach_course_offereds));
			this._lecturer_courses = new EntitySet<lecturer_course>(new Action<lecturer_course>(this.attach_lecturer_courses), new Action<lecturer_course>(this.detach_lecturer_courses));
			this._student_sections = new EntitySet<student_section>(new Action<student_section>(this.attach_student_sections), new Action<student_section>(this.detach_student_sections));
			this._course_sections = new EntitySet<course_section>(new Action<course_section>(this.attach_course_sections), new Action<course_section>(this.detach_course_sections));
			this._sections = new EntitySet<section>(new Action<section>(this.attach_sections), new Action<section>(this.detach_sections));
			this._attendances = new EntitySet<attendance>(new Action<attendance>(this.attach_attendances), new Action<attendance>(this.detach_attendances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string courseCode
		{
			get
			{
				return this._courseCode;
			}
			set
			{
				if ((this._courseCode != value))
				{
					this.OncourseCodeChanging(value);
					this.SendPropertyChanging();
					this._courseCode = value;
					this.SendPropertyChanged("courseCode");
					this.OncourseCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string courseName
		{
			get
			{
				return this._courseName;
			}
			set
			{
				if ((this._courseName != value))
				{
					this.OncourseNameChanging(value);
					this.SendPropertyChanging();
					this._courseName = value;
					this.SendPropertyChanged("courseName");
					this.OncourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortForm", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string shortForm
		{
			get
			{
				return this._shortForm;
			}
			set
			{
				if ((this._shortForm != value))
				{
					this.OnshortFormChanging(value);
					this.SendPropertyChanging();
					this._shortForm = value;
					this.SendPropertyChanged("shortForm");
					this.OnshortFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creditHours", DbType="Int NOT NULL")]
		public int creditHours
		{
			get
			{
				return this._creditHours;
			}
			set
			{
				if ((this._creditHours != value))
				{
					this.OncreditHoursChanging(value);
					this.SendPropertyChanging();
					this._creditHours = value;
					this.SendPropertyChanged("creditHours");
					this.OncreditHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_course_offered", Storage="_course_offereds", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID")]
		public EntitySet<course_offered> course_offereds
		{
			get
			{
				return this._course_offereds;
			}
			set
			{
				this._course_offereds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_lecturer_course", Storage="_lecturer_courses", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID")]
		public EntitySet<lecturer_course> lecturer_courses
		{
			get
			{
				return this._lecturer_courses;
			}
			set
			{
				this._lecturer_courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_student_section", Storage="_student_sections", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID")]
		public EntitySet<student_section> student_sections
		{
			get
			{
				return this._student_sections;
			}
			set
			{
				this._student_sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_course_section", Storage="_course_sections", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID")]
		public EntitySet<course_section> course_sections
		{
			get
			{
				return this._course_sections;
			}
			set
			{
				this._course_sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_section", Storage="_sections", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID")]
		public EntitySet<section> sections
		{
			get
			{
				return this._sections;
			}
			set
			{
				this._sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_attendance", Storage="_attendances", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID")]
		public EntitySet<attendance> attendances
		{
			get
			{
				return this._attendances;
			}
			set
			{
				this._attendances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_course_offereds(course_offered entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_course_offereds(course_offered entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_lecturer_courses(lecturer_course entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_lecturer_courses(lecturer_course entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_student_sections(student_section entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_student_sections(student_section entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_course_sections(course_section entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_course_sections(course_section entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_sections(section entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_sections(section entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.year_semester")]
	public partial class year_semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _semesterID;
		
		private string _year;
		
		private int _semester;
		
		private EntitySet<course_offered> _course_offereds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsemesterIDChanging(int value);
    partial void OnsemesterIDChanged();
    partial void OnyearChanging(string value);
    partial void OnyearChanged();
    partial void OnsemesterChanging(int value);
    partial void OnsemesterChanged();
    #endregion
		
		public year_semester()
		{
			this._course_offereds = new EntitySet<course_offered>(new Action<course_offered>(this.attach_course_offereds), new Action<course_offered>(this.detach_course_offereds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semesterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int semesterID
		{
			get
			{
				return this._semesterID;
			}
			set
			{
				if ((this._semesterID != value))
				{
					this.OnsemesterIDChanging(value);
					this.SendPropertyChanging();
					this._semesterID = value;
					this.SendPropertyChanged("semesterID");
					this.OnsemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semester", DbType="Int NOT NULL")]
		public int semester
		{
			get
			{
				return this._semester;
			}
			set
			{
				if ((this._semester != value))
				{
					this.OnsemesterChanging(value);
					this.SendPropertyChanging();
					this._semester = value;
					this.SendPropertyChanged("semester");
					this.OnsemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="year_semester_course_offered", Storage="_course_offereds", ThisKey="semesterID", OtherKey="semesterID")]
		public EntitySet<course_offered> course_offereds
		{
			get
			{
				return this._course_offereds;
			}
			set
			{
				this._course_offereds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_course_offereds(course_offered entity)
		{
			this.SendPropertyChanging();
			entity.year_semester = this;
		}
		
		private void detach_course_offereds(course_offered entity)
		{
			this.SendPropertyChanging();
			entity.year_semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student_section")]
	public partial class student_section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ssID;
		
		private string _courseCode;
		
		private int _courseID;
		
		private int _sectionID;
		
		private string _matricNo;
		
		private EntityRef<course> _course;
		
		private EntityRef<student> _student;
		
		private EntityRef<section> _section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnssIDChanging(int value);
    partial void OnssIDChanged();
    partial void OncourseCodeChanging(string value);
    partial void OncourseCodeChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OnsectionIDChanging(int value);
    partial void OnsectionIDChanged();
    partial void OnmatricNoChanging(string value);
    partial void OnmatricNoChanged();
    #endregion
		
		public student_section()
		{
			this._course = default(EntityRef<course>);
			this._student = default(EntityRef<student>);
			this._section = default(EntityRef<section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ssID
		{
			get
			{
				return this._ssID;
			}
			set
			{
				if ((this._ssID != value))
				{
					this.OnssIDChanging(value);
					this.SendPropertyChanging();
					this._ssID = value;
					this.SendPropertyChanged("ssID");
					this.OnssIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseCode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string courseCode
		{
			get
			{
				return this._courseCode;
			}
			set
			{
				if ((this._courseCode != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseCodeChanging(value);
					this.SendPropertyChanging();
					this._courseCode = value;
					this.SendPropertyChanged("courseCode");
					this.OncourseCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sectionID", DbType="Int NOT NULL")]
		public int sectionID
		{
			get
			{
				return this._sectionID;
			}
			set
			{
				if ((this._sectionID != value))
				{
					if (this._section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsectionIDChanging(value);
					this.SendPropertyChanging();
					this._sectionID = value;
					this.SendPropertyChanged("sectionID");
					this.OnsectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matricNo", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string matricNo
		{
			get
			{
				return this._matricNo;
			}
			set
			{
				if ((this._matricNo != value))
				{
					if (this._student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmatricNoChanging(value);
					this.SendPropertyChanging();
					this._matricNo = value;
					this.SendPropertyChanged("matricNo");
					this.OnmatricNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_student_section", Storage="_course", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.student_sections.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.student_sections.Add(this);
						this._courseCode = value.courseCode;
						this._courseID = value.courseID;
					}
					else
					{
						this._courseCode = default(string);
						this._courseID = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_student_section", Storage="_student", ThisKey="matricNo", OtherKey="matricNo", IsForeignKey=true)]
		public student student
		{
			get
			{
				return this._student.Entity;
			}
			set
			{
				student previousValue = this._student.Entity;
				if (((previousValue != value) 
							|| (this._student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._student.Entity = null;
						previousValue.student_sections.Remove(this);
					}
					this._student.Entity = value;
					if ((value != null))
					{
						value.student_sections.Add(this);
						this._matricNo = value.matricNo;
					}
					else
					{
						this._matricNo = default(string);
					}
					this.SendPropertyChanged("student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="section_student_section", Storage="_section", ThisKey="sectionID", OtherKey="sectionID", IsForeignKey=true)]
		public section section
		{
			get
			{
				return this._section.Entity;
			}
			set
			{
				section previousValue = this._section.Entity;
				if (((previousValue != value) 
							|| (this._section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._section.Entity = null;
						previousValue.student_sections.Remove(this);
					}
					this._section.Entity = value;
					if ((value != null))
					{
						value.student_sections.Add(this);
						this._sectionID = value.sectionID;
					}
					else
					{
						this._sectionID = default(int);
					}
					this.SendPropertyChanged("section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student")]
	public partial class student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _student_name;
		
		private string _matricNo;
		
		private string _phoneNo;
		
		private string _email;
		
		private string _student_IC;
		
		private string _address;
		
		private string _DOB;
		
		private string _gender;
		
		private string _race;
		
		private string _nationality;
		
		private string _guardian_name;
		
		private string _occupation;
		
		private string _guardian_phoneNo;
		
		private double _salary;
		
		private string _guardian_address;
		
		private EntitySet<student_section> _student_sections;
		
		private EntitySet<attendance_status> _attendance_status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstudent_nameChanging(string value);
    partial void Onstudent_nameChanged();
    partial void OnmatricNoChanging(string value);
    partial void OnmatricNoChanged();
    partial void OnphoneNoChanging(string value);
    partial void OnphoneNoChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onstudent_ICChanging(string value);
    partial void Onstudent_ICChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnDOBChanging(string value);
    partial void OnDOBChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnraceChanging(string value);
    partial void OnraceChanged();
    partial void OnnationalityChanging(string value);
    partial void OnnationalityChanged();
    partial void Onguardian_nameChanging(string value);
    partial void Onguardian_nameChanged();
    partial void OnoccupationChanging(string value);
    partial void OnoccupationChanged();
    partial void Onguardian_phoneNoChanging(string value);
    partial void Onguardian_phoneNoChanged();
    partial void OnsalaryChanging(double value);
    partial void OnsalaryChanged();
    partial void Onguardian_addressChanging(string value);
    partial void Onguardian_addressChanged();
    #endregion
		
		public student()
		{
			this._student_sections = new EntitySet<student_section>(new Action<student_section>(this.attach_student_sections), new Action<student_section>(this.detach_student_sections));
			this._attendance_status = new EntitySet<attendance_status>(new Action<attendance_status>(this.attach_attendance_status), new Action<attendance_status>(this.detach_attendance_status));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_name", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string student_name
		{
			get
			{
				return this._student_name;
			}
			set
			{
				if ((this._student_name != value))
				{
					this.Onstudent_nameChanging(value);
					this.SendPropertyChanging();
					this._student_name = value;
					this.SendPropertyChanged("student_name");
					this.Onstudent_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matricNo", DbType="VarChar(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string matricNo
		{
			get
			{
				return this._matricNo;
			}
			set
			{
				if ((this._matricNo != value))
				{
					this.OnmatricNoChanging(value);
					this.SendPropertyChanging();
					this._matricNo = value;
					this.SendPropertyChanged("matricNo");
					this.OnmatricNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNo", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string phoneNo
		{
			get
			{
				return this._phoneNo;
			}
			set
			{
				if ((this._phoneNo != value))
				{
					this.OnphoneNoChanging(value);
					this.SendPropertyChanging();
					this._phoneNo = value;
					this.SendPropertyChanged("phoneNo");
					this.OnphoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_IC", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string student_IC
		{
			get
			{
				return this._student_IC;
			}
			set
			{
				if ((this._student_IC != value))
				{
					this.Onstudent_ICChanging(value);
					this.SendPropertyChanging();
					this._student_IC = value;
					this.SendPropertyChanged("student_IC");
					this.Onstudent_ICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_race", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string race
		{
			get
			{
				return this._race;
			}
			set
			{
				if ((this._race != value))
				{
					this.OnraceChanging(value);
					this.SendPropertyChanging();
					this._race = value;
					this.SendPropertyChanged("race");
					this.OnraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nationality", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string nationality
		{
			get
			{
				return this._nationality;
			}
			set
			{
				if ((this._nationality != value))
				{
					this.OnnationalityChanging(value);
					this.SendPropertyChanging();
					this._nationality = value;
					this.SendPropertyChanged("nationality");
					this.OnnationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_guardian_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string guardian_name
		{
			get
			{
				return this._guardian_name;
			}
			set
			{
				if ((this._guardian_name != value))
				{
					this.Onguardian_nameChanging(value);
					this.SendPropertyChanging();
					this._guardian_name = value;
					this.SendPropertyChanged("guardian_name");
					this.Onguardian_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_occupation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string occupation
		{
			get
			{
				return this._occupation;
			}
			set
			{
				if ((this._occupation != value))
				{
					this.OnoccupationChanging(value);
					this.SendPropertyChanging();
					this._occupation = value;
					this.SendPropertyChanged("occupation");
					this.OnoccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_guardian_phoneNo", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string guardian_phoneNo
		{
			get
			{
				return this._guardian_phoneNo;
			}
			set
			{
				if ((this._guardian_phoneNo != value))
				{
					this.Onguardian_phoneNoChanging(value);
					this.SendPropertyChanging();
					this._guardian_phoneNo = value;
					this.SendPropertyChanged("guardian_phoneNo");
					this.Onguardian_phoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Float NOT NULL")]
		public double salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_guardian_address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string guardian_address
		{
			get
			{
				return this._guardian_address;
			}
			set
			{
				if ((this._guardian_address != value))
				{
					this.Onguardian_addressChanging(value);
					this.SendPropertyChanging();
					this._guardian_address = value;
					this.SendPropertyChanged("guardian_address");
					this.Onguardian_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_student_section", Storage="_student_sections", ThisKey="matricNo", OtherKey="matricNo")]
		public EntitySet<student_section> student_sections
		{
			get
			{
				return this._student_sections;
			}
			set
			{
				this._student_sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_attendance_status", Storage="_attendance_status", ThisKey="matricNo", OtherKey="matricNo")]
		public EntitySet<attendance_status> attendance_status
		{
			get
			{
				return this._attendance_status;
			}
			set
			{
				this._attendance_status.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_student_sections(student_section entity)
		{
			this.SendPropertyChanging();
			entity.student = this;
		}
		
		private void detach_student_sections(student_section entity)
		{
			this.SendPropertyChanging();
			entity.student = null;
		}
		
		private void attach_attendance_status(attendance_status entity)
		{
			this.SendPropertyChanging();
			entity.student = this;
		}
		
		private void detach_attendance_status(attendance_status entity)
		{
			this.SendPropertyChanging();
			entity.student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course_section")]
	public partial class course_section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _csID;
		
		private string _courseCode;
		
		private int _courseID;
		
		private int _sectionID;
		
		private EntityRef<course> _course;
		
		private EntityRef<section> _section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncsIDChanging(int value);
    partial void OncsIDChanged();
    partial void OncourseCodeChanging(string value);
    partial void OncourseCodeChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OnsectionIDChanging(int value);
    partial void OnsectionIDChanged();
    #endregion
		
		public course_section()
		{
			this._course = default(EntityRef<course>);
			this._section = default(EntityRef<section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_csID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int csID
		{
			get
			{
				return this._csID;
			}
			set
			{
				if ((this._csID != value))
				{
					this.OncsIDChanging(value);
					this.SendPropertyChanging();
					this._csID = value;
					this.SendPropertyChanged("csID");
					this.OncsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseCode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string courseCode
		{
			get
			{
				return this._courseCode;
			}
			set
			{
				if ((this._courseCode != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseCodeChanging(value);
					this.SendPropertyChanging();
					this._courseCode = value;
					this.SendPropertyChanged("courseCode");
					this.OncourseCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sectionID", DbType="Int NOT NULL")]
		public int sectionID
		{
			get
			{
				return this._sectionID;
			}
			set
			{
				if ((this._sectionID != value))
				{
					if (this._section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsectionIDChanging(value);
					this.SendPropertyChanging();
					this._sectionID = value;
					this.SendPropertyChanged("sectionID");
					this.OnsectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_course_section", Storage="_course", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.course_sections.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.course_sections.Add(this);
						this._courseCode = value.courseCode;
						this._courseID = value.courseID;
					}
					else
					{
						this._courseCode = default(string);
						this._courseID = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="section_course_section", Storage="_section", ThisKey="sectionID", OtherKey="sectionID", IsForeignKey=true)]
		public section section
		{
			get
			{
				return this._section.Entity;
			}
			set
			{
				section previousValue = this._section.Entity;
				if (((previousValue != value) 
							|| (this._section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._section.Entity = null;
						previousValue.course_sections.Remove(this);
					}
					this._section.Entity = value;
					if ((value != null))
					{
						value.course_sections.Add(this);
						this._sectionID = value.sectionID;
					}
					else
					{
						this._sectionID = default(int);
					}
					this.SendPropertyChanged("section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.section")]
	public partial class section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _semesterID;
		
		private int _sectionID;
		
		private string _courseCode;
		
		private int _courseID;
		
		private int _sectionNo;
		
		private EntitySet<student_section> _student_sections;
		
		private EntitySet<course_section> _course_sections;
		
		private EntitySet<attendance> _attendances;
		
		private EntityRef<course> _course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsemesterIDChanging(int value);
    partial void OnsemesterIDChanged();
    partial void OnsectionIDChanging(int value);
    partial void OnsectionIDChanged();
    partial void OncourseCodeChanging(string value);
    partial void OncourseCodeChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OnsectionNoChanging(int value);
    partial void OnsectionNoChanged();
    #endregion
		
		public section()
		{
			this._student_sections = new EntitySet<student_section>(new Action<student_section>(this.attach_student_sections), new Action<student_section>(this.detach_student_sections));
			this._course_sections = new EntitySet<course_section>(new Action<course_section>(this.attach_course_sections), new Action<course_section>(this.detach_course_sections));
			this._attendances = new EntitySet<attendance>(new Action<attendance>(this.attach_attendances), new Action<attendance>(this.detach_attendances));
			this._course = default(EntityRef<course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semesterID", DbType="Int NOT NULL")]
		public int semesterID
		{
			get
			{
				return this._semesterID;
			}
			set
			{
				if ((this._semesterID != value))
				{
					this.OnsemesterIDChanging(value);
					this.SendPropertyChanging();
					this._semesterID = value;
					this.SendPropertyChanged("semesterID");
					this.OnsemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sectionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sectionID
		{
			get
			{
				return this._sectionID;
			}
			set
			{
				if ((this._sectionID != value))
				{
					this.OnsectionIDChanging(value);
					this.SendPropertyChanging();
					this._sectionID = value;
					this.SendPropertyChanged("sectionID");
					this.OnsectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseCode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string courseCode
		{
			get
			{
				return this._courseCode;
			}
			set
			{
				if ((this._courseCode != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseCodeChanging(value);
					this.SendPropertyChanging();
					this._courseCode = value;
					this.SendPropertyChanged("courseCode");
					this.OncourseCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sectionNo", DbType="Int NOT NULL")]
		public int sectionNo
		{
			get
			{
				return this._sectionNo;
			}
			set
			{
				if ((this._sectionNo != value))
				{
					this.OnsectionNoChanging(value);
					this.SendPropertyChanging();
					this._sectionNo = value;
					this.SendPropertyChanged("sectionNo");
					this.OnsectionNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="section_student_section", Storage="_student_sections", ThisKey="sectionID", OtherKey="sectionID")]
		public EntitySet<student_section> student_sections
		{
			get
			{
				return this._student_sections;
			}
			set
			{
				this._student_sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="section_course_section", Storage="_course_sections", ThisKey="sectionID", OtherKey="sectionID")]
		public EntitySet<course_section> course_sections
		{
			get
			{
				return this._course_sections;
			}
			set
			{
				this._course_sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="section_attendance", Storage="_attendances", ThisKey="sectionID", OtherKey="sectionID")]
		public EntitySet<attendance> attendances
		{
			get
			{
				return this._attendances;
			}
			set
			{
				this._attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_section", Storage="_course", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.sections.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.sections.Add(this);
						this._courseCode = value.courseCode;
						this._courseID = value.courseID;
					}
					else
					{
						this._courseCode = default(string);
						this._courseID = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_student_sections(student_section entity)
		{
			this.SendPropertyChanging();
			entity.section = this;
		}
		
		private void detach_student_sections(student_section entity)
		{
			this.SendPropertyChanging();
			entity.section = null;
		}
		
		private void attach_course_sections(course_section entity)
		{
			this.SendPropertyChanging();
			entity.section = this;
		}
		
		private void detach_course_sections(course_section entity)
		{
			this.SendPropertyChanging();
			entity.section = null;
		}
		
		private void attach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.section = this;
		}
		
		private void detach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.section = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.attendance")]
	public partial class attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _attendanceID;
		
		private string _courseCode;
		
		private int _courseID;
		
		private int _sectionID;
		
		private int _dateID;
		
		private EntitySet<attendance_status> _attendance_status;
		
		private EntityRef<section> _section;
		
		private EntityRef<course> _course;
		
		private EntityRef<attendance_date> _attendance_date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnattendanceIDChanging(int value);
    partial void OnattendanceIDChanged();
    partial void OncourseCodeChanging(string value);
    partial void OncourseCodeChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OnsectionIDChanging(int value);
    partial void OnsectionIDChanged();
    partial void OndateIDChanging(int value);
    partial void OndateIDChanged();
    #endregion
		
		public attendance()
		{
			this._attendance_status = new EntitySet<attendance_status>(new Action<attendance_status>(this.attach_attendance_status), new Action<attendance_status>(this.detach_attendance_status));
			this._section = default(EntityRef<section>);
			this._course = default(EntityRef<course>);
			this._attendance_date = default(EntityRef<attendance_date>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attendanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int attendanceID
		{
			get
			{
				return this._attendanceID;
			}
			set
			{
				if ((this._attendanceID != value))
				{
					this.OnattendanceIDChanging(value);
					this.SendPropertyChanging();
					this._attendanceID = value;
					this.SendPropertyChanged("attendanceID");
					this.OnattendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseCode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string courseCode
		{
			get
			{
				return this._courseCode;
			}
			set
			{
				if ((this._courseCode != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseCodeChanging(value);
					this.SendPropertyChanging();
					this._courseCode = value;
					this.SendPropertyChanged("courseCode");
					this.OncourseCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sectionID", DbType="Int NOT NULL")]
		public int sectionID
		{
			get
			{
				return this._sectionID;
			}
			set
			{
				if ((this._sectionID != value))
				{
					if (this._section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsectionIDChanging(value);
					this.SendPropertyChanging();
					this._sectionID = value;
					this.SendPropertyChanged("sectionID");
					this.OnsectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateID", DbType="Int NOT NULL")]
		public int dateID
		{
			get
			{
				return this._dateID;
			}
			set
			{
				if ((this._dateID != value))
				{
					if (this._attendance_date.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndateIDChanging(value);
					this.SendPropertyChanging();
					this._dateID = value;
					this.SendPropertyChanged("dateID");
					this.OndateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attendance_attendance_status", Storage="_attendance_status", ThisKey="attendanceID", OtherKey="attendanceID")]
		public EntitySet<attendance_status> attendance_status
		{
			get
			{
				return this._attendance_status;
			}
			set
			{
				this._attendance_status.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="section_attendance", Storage="_section", ThisKey="sectionID", OtherKey="sectionID", IsForeignKey=true)]
		public section section
		{
			get
			{
				return this._section.Entity;
			}
			set
			{
				section previousValue = this._section.Entity;
				if (((previousValue != value) 
							|| (this._section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._section.Entity = null;
						previousValue.attendances.Remove(this);
					}
					this._section.Entity = value;
					if ((value != null))
					{
						value.attendances.Add(this);
						this._sectionID = value.sectionID;
					}
					else
					{
						this._sectionID = default(int);
					}
					this.SendPropertyChanged("section");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_attendance", Storage="_course", ThisKey="courseCode,courseID", OtherKey="courseCode,courseID", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.attendances.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.attendances.Add(this);
						this._courseCode = value.courseCode;
						this._courseID = value.courseID;
					}
					else
					{
						this._courseCode = default(string);
						this._courseID = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attendance_date_attendance", Storage="_attendance_date", ThisKey="dateID", OtherKey="dateID", IsForeignKey=true)]
		public attendance_date attendance_date
		{
			get
			{
				return this._attendance_date.Entity;
			}
			set
			{
				attendance_date previousValue = this._attendance_date.Entity;
				if (((previousValue != value) 
							|| (this._attendance_date.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._attendance_date.Entity = null;
						previousValue.attendances.Remove(this);
					}
					this._attendance_date.Entity = value;
					if ((value != null))
					{
						value.attendances.Add(this);
						this._dateID = value.dateID;
					}
					else
					{
						this._dateID = default(int);
					}
					this.SendPropertyChanged("attendance_date");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_attendance_status(attendance_status entity)
		{
			this.SendPropertyChanging();
			entity.attendance = this;
		}
		
		private void detach_attendance_status(attendance_status entity)
		{
			this.SendPropertyChanging();
			entity.attendance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.attendance_date")]
	public partial class attendance_date : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dateID;
		
		private System.DateTime _date;
		
		private EntitySet<attendance> _attendances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndateIDChanging(int value);
    partial void OndateIDChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public attendance_date()
		{
			this._attendances = new EntitySet<attendance>(new Action<attendance>(this.attach_attendances), new Action<attendance>(this.detach_attendances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dateID
		{
			get
			{
				return this._dateID;
			}
			set
			{
				if ((this._dateID != value))
				{
					this.OndateIDChanging(value);
					this.SendPropertyChanging();
					this._dateID = value;
					this.SendPropertyChanged("dateID");
					this.OndateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attendance_date_attendance", Storage="_attendances", ThisKey="dateID", OtherKey="dateID")]
		public EntitySet<attendance> attendances
		{
			get
			{
				return this._attendances;
			}
			set
			{
				this._attendances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.attendance_date = this;
		}
		
		private void detach_attendances(attendance entity)
		{
			this.SendPropertyChanging();
			entity.attendance_date = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.attendance_status")]
	public partial class attendance_status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _uID;
		
		private int _attendanceID;
		
		private string _matricNo;
		
		private short _status;
		
		private string _comment;
		
		private EntityRef<attendance> _attendance;
		
		private EntityRef<student> _student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuIDChanging(int value);
    partial void OnuIDChanged();
    partial void OnattendanceIDChanging(int value);
    partial void OnattendanceIDChanged();
    partial void OnmatricNoChanging(string value);
    partial void OnmatricNoChanged();
    partial void OnstatusChanging(short value);
    partial void OnstatusChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public attendance_status()
		{
			this._attendance = default(EntityRef<attendance>);
			this._student = default(EntityRef<student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int uID
		{
			get
			{
				return this._uID;
			}
			set
			{
				if ((this._uID != value))
				{
					this.OnuIDChanging(value);
					this.SendPropertyChanging();
					this._uID = value;
					this.SendPropertyChanged("uID");
					this.OnuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attendanceID", DbType="Int NOT NULL")]
		public int attendanceID
		{
			get
			{
				return this._attendanceID;
			}
			set
			{
				if ((this._attendanceID != value))
				{
					if (this._attendance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnattendanceIDChanging(value);
					this.SendPropertyChanging();
					this._attendanceID = value;
					this.SendPropertyChanged("attendanceID");
					this.OnattendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matricNo", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string matricNo
		{
			get
			{
				return this._matricNo;
			}
			set
			{
				if ((this._matricNo != value))
				{
					if (this._student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmatricNoChanging(value);
					this.SendPropertyChanging();
					this._matricNo = value;
					this.SendPropertyChanged("matricNo");
					this.OnmatricNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="SmallInt NOT NULL")]
		public short status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attendance_attendance_status", Storage="_attendance", ThisKey="attendanceID", OtherKey="attendanceID", IsForeignKey=true)]
		public attendance attendance
		{
			get
			{
				return this._attendance.Entity;
			}
			set
			{
				attendance previousValue = this._attendance.Entity;
				if (((previousValue != value) 
							|| (this._attendance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._attendance.Entity = null;
						previousValue.attendance_status.Remove(this);
					}
					this._attendance.Entity = value;
					if ((value != null))
					{
						value.attendance_status.Add(this);
						this._attendanceID = value.attendanceID;
					}
					else
					{
						this._attendanceID = default(int);
					}
					this.SendPropertyChanged("attendance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_attendance_status", Storage="_student", ThisKey="matricNo", OtherKey="matricNo", IsForeignKey=true)]
		public student student
		{
			get
			{
				return this._student.Entity;
			}
			set
			{
				student previousValue = this._student.Entity;
				if (((previousValue != value) 
							|| (this._student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._student.Entity = null;
						previousValue.attendance_status.Remove(this);
					}
					this._student.Entity = value;
					if ((value != null))
					{
						value.attendance_status.Add(this);
						this._matricNo = value.matricNo;
					}
					else
					{
						this._matricNo = default(string);
					}
					this.SendPropertyChanged("student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
